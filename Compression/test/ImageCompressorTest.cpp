#include <gtest/gtest.h>
#include "Pixel.hpp"
#include "ImageCompressor.hpp"



// NOTE: Input and output values for test were generated from MATLAB
TEST(ImageCompressor, Encode)
{
	RGBPixel pixels[8][8] = {
		{{ 95, 147, 197}, { 97, 149, 199}, {103, 155, 205}, {101, 153, 203}, {103, 155, 203}, {112, 163, 210}, {115, 166, 213}, {123, 171, 217}},
		{{101, 153, 201}, {103, 155, 203}, {104, 156, 204}, {102, 154, 202}, {105, 157, 205}, {110, 161, 208}, {113, 164, 211}, {121, 169, 215}},
		{{109, 160, 207}, {112, 163, 210}, {107, 159, 207}, {108, 158, 207}, {112, 163, 210}, {112, 163, 210}, {115, 163, 211}, {119, 167, 213}},
		{{114, 165, 210}, {119, 170, 215}, {112, 163, 210}, {114, 165, 212}, {121, 172, 219}, {120, 168, 216}, {119, 167, 213}, {121, 169, 215}},
		{{121, 170, 213}, {126, 175, 218}, {118, 166, 212}, {120, 168, 214}, {126, 174, 220}, {124, 172, 218}, {123, 172, 215}, {125, 172, 216}},
		{{127, 174, 218}, {129, 176, 220}, {123, 172, 215}, {121, 170, 213}, {125, 174, 217}, {126, 175, 218}, {127, 174, 216}, {128, 175, 217}},
		{{128, 175, 219}, {130, 177, 221}, {129, 176, 220}, {125, 172, 216}, {127, 174, 216}, {131, 178, 220}, {131, 179, 219}, {131, 179, 219}},
		{{128, 172, 217}, {128, 175, 219}, {133, 180, 224}, {128, 175, 219}, {129, 176, 218}, {136, 184, 224}, {134, 182, 222}, {134, 182, 220}}
	};

	float reference[8][8][3] = {
		{{76.f, 73.f, 49.f}, {-2.f, 0.f, 0.f}, {1.f, 0.f, 0.f}, {0.f, 0.f, 0.f}, {0.f, 0.f, 0.f}, {0.f, 0.f, 0.f}, {0.f, 0.f, 0.f}, {0.f, 0.f, 0.f}},
		{{-4.f,  1.f,  0.f}, {-1.f, 0.f, 0.f}, {0.f, 0.f, 0.f}, {0.f, 0.f, 0.f}, {0.f, 0.f, 0.f}, {0.f, 0.f, 0.f}, {0.f, 0.f, 0.f}, {0.f, 0.f, 0.f}},
		{{ 0.f,  0.f,  0.f}, {-1.f, 0.f, 0.f}, {0.f, 0.f, 0.f}, {0.f, 0.f, 0.f}, {0.f, 0.f, 0.f}, {0.f, 0.f, 0.f}, {0.f, 0.f, 0.f}, {0.f, 0.f, 0.f}},
		{{ 0.f,  0.f,  0.f}, { 0.f, 0.f, 0.f}, {0.f, 0.f, 0.f}, {0.f, 0.f, 0.f}, {0.f, 0.f, 0.f}, {0.f, 0.f, 0.f}, {0.f, 0.f, 0.f}, {0.f, 0.f, 0.f}},
		{{ 0.f,  0.f,  0.f}, { 0.f, 0.f, 0.f}, {0.f, 0.f, 0.f}, {0.f, 0.f, 0.f}, {0.f, 0.f, 0.f}, {0.f, 0.f, 0.f}, {0.f, 0.f, 0.f}, {0.f, 0.f, 0.f}},
		{{ 0.f,  0.f,  0.f}, { 0.f, 0.f, 0.f}, {0.f, 0.f, 0.f}, {0.f, 0.f, 0.f}, {0.f, 0.f, 0.f}, {0.f, 0.f, 0.f}, {0.f, 0.f, 0.f}, {0.f, 0.f, 0.f}},
		{{ 0.f,  0.f,  0.f}, { 0.f, 0.f, 0.f}, {0.f, 0.f, 0.f}, {0.f, 0.f, 0.f}, {0.f, 0.f, 0.f}, {0.f, 0.f, 0.f}, {0.f, 0.f, 0.f}, {0.f, 0.f, 0.f}},
		{{ 0.f,  0.f,  0.f}, { 0.f, 0.f, 0.f}, {0.f, 0.f, 0.f}, {0.f, 0.f, 0.f}, {0.f, 0.f, 0.f}, {0.f, 0.f, 0.f}, {0.f, 0.f, 0.f}, {0.f, 0.f, 0.f}}
	};

	// Prepare data
	Image img(8, 8);

	for (int i = 0; i < 8; i++)
	{
		for (int j = 0; j < 8; j++)
		{
			img.SetPixel(i, j, Pixel{ pixels[i][j] });
		}
	}
	FloatImage image(img);

	// Encode
	ImageCompressor encoder(image,50);
	auto result = encoder.Encode();

	// Check
	for (int i = 0; i < 8; i++)
	{
		for (int j = 0; j < 8; j++)
		{
			auto data = result->Get(i, j);
			EXPECT_NEAR(data.data[0], reference[i][j][0], 0.1f);
			EXPECT_NEAR(data.data[1], reference[i][j][1], 0.1f);
			EXPECT_NEAR(data.data[2], reference[i][j][2], 0.1f);
		}
	}
}

// NOTE: Input and output values for test were generated from MATLAB
TEST(ImageCompressor, Decode)
{
	float input[8][8][3] = {
		{{71.f, 75.f, 46.f}, {0.f, 0.f, 0.f}, {0.f, 0.f, 0.f}, {0.f, 0.f, 0.f}, {0.f, 0.f, 0.f}, {0.f, 0.f, 0.f}, {0.f, 0.f, 0.f}, {0.f, 0.f, 0.f}},
		{{ 2.f,  0.f,  0.f}, {1.f, 0.f, 0.f}, {0.f, 0.f, 0.f}, {0.f, 0.f, 0.f}, {0.f, 0.f, 0.f}, {0.f, 0.f, 0.f}, {0.f, 0.f, 0.f}, {0.f, 0.f, 0.f}},
		{{-1.f,  0.f,  0.f}, {0.f, 0.f, 0.f}, {0.f, 0.f, 0.f}, {0.f, 0.f, 0.f}, {0.f, 0.f, 0.f}, {0.f, 0.f, 0.f}, {0.f, 0.f, 0.f}, {0.f, 0.f, 0.f}},
		{{ 0.f,  0.f,  0.f}, {0.f, 0.f, 0.f}, {0.f, 0.f, 0.f}, {0.f, 0.f, 0.f}, {0.f, 0.f, 0.f}, {0.f, 0.f, 0.f}, {0.f, 0.f, 0.f}, {0.f, 0.f, 0.f}},
		{{ 0.f,  0.f,  0.f}, {0.f, 0.f, 0.f}, {0.f, 0.f, 0.f}, {0.f, 0.f, 0.f}, {0.f, 0.f, 0.f}, {0.f, 0.f, 0.f}, {0.f, 0.f, 0.f}, {0.f, 0.f, 0.f}},
		{{ 0.f,  0.f,  0.f}, {0.f, 0.f, 0.f}, {0.f, 0.f, 0.f}, {0.f, 0.f, 0.f}, {0.f, 0.f, 0.f}, {0.f, 0.f, 0.f}, {0.f, 0.f, 0.f}, {0.f, 0.f, 0.f}},
		{{ 0.f,  0.f,  0.f}, {0.f, 0.f, 0.f}, {0.f, 0.f, 0.f}, {0.f, 0.f, 0.f}, {0.f, 0.f, 0.f}, {0.f, 0.f, 0.f}, {0.f, 0.f, 0.f}, {0.f, 0.f, 0.f}},
		{{ 0.f,  0.f,  0.f}, {0.f, 0.f, 0.f}, {0.f, 0.f, 0.f}, {0.f, 0.f, 0.f}, {0.f, 0.f, 0.f}, {0.f, 0.f, 0.f}, {0.f, 0.f, 0.f}, {0.f, 0.f, 0.f}}
	};

	float reference[8][8][3] = {
		{{146.76045365f, 159.375f, 97.75f}, {146.32111382f, 159.375F, 97.75f}, {145.50931967f, 159.375f, 97.75f}, {144.4486595f,  159.375f, 97.75f}, {143.3006092f,  159.375f, 97.75f}, {142.23994903f, 159.375f, 97.75f}, {141.42815488f, 159.375f, 97.75f}, {140.98881505f, 159.375f, 97.75f}},
		{{147.0270131f,  159.375F, 97.75f}, {146.65455878f, 159.375f, 97.75f}, {145.96635293f, 159.375f, 97.75f}, {145.06716866f, 159.375f, 97.75f}, {144.09389861f, 159.375f, 97.75f}, {143.19471433f, 159.375f, 97.75f}, {142.50650848f, 159.375f, 97.75f}, {142.13405416f, 159.375f, 97.75f}},
		{{146.93886337f, 159.375f, 97.75f}, {146.68999735f, 159.375f, 97.75f}, {146.2301529f,  159.375f, 97.75f}, {145.62933718f, 159.375f, 97.75f}, {144.97901892f, 159.375f, 97.75f}, {144.3782032f,  159.375f, 97.75f}, {143.91835875f, 159.375f, 97.75f}, {143.66949273f, 159.375f, 97.75f}},
		{{145.68820847f, 159.375f, 97.75f}, {145.60081835f, 159.375f, 97.75f}, {145.43934245f, 159.375f, 97.75f}, {145.22836403f, 159.375f, 97.75f}, {145.00000263f, 159.375f, 97.75f}, {144.7890242f,  159.375f, 97.75f}, {144.6275483f,  159.375f, 97.75f}, {144.54015818f, 159.375f, 97.75f}},
		{{142.8847619f,  159.375f, 97.75f}, {142.97215203f, 159.375f, 97.75f}, {143.13362792f, 159.375f, 97.75f}, {143.34460635f, 159.375f, 97.75f}, {143.57296775f, 159.375f, 97.75f}, {143.78394618f, 159.375f, 97.75f}, {143.94542207f, 159.375f, 97.75f}, {144.0328122f,  159.375f, 97.75f}},
		{{138.95532298f, 159.375f, 97.75f}, {139.204189f,   159.375f, 97.75f}, {139.66403345f, 159.375f, 97.75f}, {140.26484917f, 159.375f, 97.75f}, {140.91516743f, 159.375f, 97.75f}, {141.51598315f, 159.375f, 97.75f}, {141.9758276f,  159.375f, 97.75f}, {142.22469362f, 159.375f, 97.75f}},
		{{135.07880055f, 159.375f, 97.75f}, {135.45125487f, 159.375f, 97.75f}, {136.13946072f, 159.375f, 97.75f}, {137.03864499f, 159.375f, 97.75f}, {138.01191504f, 159.375F, 97.75f}, {138.91109932f, 159.375f, 97.75f}, {139.59930517f, 159.375f, 97.75f}, {139.97175949f, 159.375f, 97.75f}},
		{{132.66657598f, 159.375f, 97.75f}, {133.1059158f,  159.375f, 97.75f}, {133.91770996f, 159.375f, 97.75f}, {134.97837013f, 159.375f, 97.75f}, {136.12642042f, 159.375f, 97.75f}, {137.1870806f,  159.375f, 97.75f}, {137.99887475f, 159.375f, 97.75f}, {138.43821457f, 159.375f, 97.75f}}
	};

	FloatImage data(8, 8);

	for (int i = 0; i < 8; i++)
	{
		for (int j = 0; j < 8; j++)
		{
			data.Set(i, j, input[i][j]);
		}
	}

	// Decode
	ImageCompressor decoder(data, 50);
	auto result = decoder.Decode();

	// Check
	for (int i = 0; i < 8; i++)
	{
		for (int j = 0; j < 8; j++)
		{
			auto data = result->Get(i, j);
			EXPECT_NEAR(data.data[0], reference[i][j][0], 0.1f);
			EXPECT_NEAR(data.data[1], reference[i][j][1], 0.1f);
			EXPECT_NEAR(data.data[2], reference[i][j][2], 0.1f);
		}
	}
}
