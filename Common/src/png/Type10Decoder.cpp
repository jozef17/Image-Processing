#include "png/Type10Decoder.hpp"
#include "png/BitStream.hpp"
#include "png/Adler32.hpp"
#include "Exception.hpp"

#include <iostream>

Type10Decoder::Type10Decoder(BitStream& bitstream) : bitstream(bitstream)
{}

std::vector<uint8_t> Type10Decoder::Decode()
{
	std::vector<uint8_t> data;
	std::cout << "compressed with dynamic Huffman codes" << std::endl;
	
    // 5 Bits: HLIT, # of Literal / Length codes - 257 (257 - 286)
    // 5 Bits: HDIST, # of Distance codes - 1        (1 - 32)
	// 4 Bits: HCLEN, # of Code Length codes - 4     (4 - 19)
	/////////////////////////////////////////////////////////////////////////////
	std::cout << "HLIT : ";//////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////
	uint8_t hlit = Get(5);
	/////////////////////////////////////////////////////////////////////////////
	std::cout << "HDIST: ";//////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////
	uint8_t hdist = Get(5);
	/////////////////////////////////////////////////////////////////////////////
	std::cout << "HCLEN: ";//////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////
	uint8_t hclen = Get(4);

	// (HCLEN + 4) x 3 bits: code lengths for the code length alphabet given just
	// above, in the order : 
	//           16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15
	// These code lengths are interpreted as 3 - bit integers (0 - 7); as above, 
	// a code length of 0 means the corresponding symbol(literal / length or 
	// distance code length) is not used.
	uint8_t indexes[19] = { 16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15 };
	uint8_t codeLengths[19] = { 0 };
	for (uint8_t i = 0; i < hclen + 4; i++)
	{
		codeLengths[indexes[i]] = Get(3);
	}
	
	// 00011110
	// 01111010
	// 10 1 
	// 10111 10001 0111 
	// 000 110 010 000 000 000 000 000 000 010 000 110 000 000 000 110 000 110
	

	/////////////////////////////////////////////////////////////////////////////
	std::cout << "Code Lengths: ";///////////////////////////////////////////////
	for (uint8_t i = 0; i < 19; i++)/////////////////////////////////////////////
	{////////////////////////////////////////////////////////////////////////////
		std::cout << (int)codeLengths[i] <<" ";//////////////////////////////////
	}////////////////////////////////////////////////////////////////////////////
	std::cout << std::endl;//////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////

	// HLIT + 257 code lengths for the literal / length alphabet,
	//	encoded using the code length Huffman code

	uint16_t llLengths[286] = { 0 };
	for (uint16_t i = 0; i < hlit + 257; i++)
	{		
		// TODO
	}

	// HDIST + 1 code lengths for the distance alphabet, encoded using the code length Huffman code
	// TODO

	// The actual compressed data of the block, encoded using the 
	// literal / length and distance Huffman codes
	// TODO

	// The literal / length symbol 256 (end of data), encoded 
	// using the literal / length Huffman code
	// TODO

	// ?????????????????????????????????????????????????????????????????
	// The code length repeat codes can cross from HLIT + 257 to the
	// HDIST + 1 code lengths.In other words, all code lengths form
	// a single sequence of HLIT + HDIST + 258 values.


	return data;
}

uint8_t Type10Decoder::Get(uint8_t numOfBits)
{
	uint8_t value = 0;
	for (uint8_t i = 0; i < numOfBits; i++)
	{
		auto bit = this->bitstream.GetNext();
//		value = value << 1 | bit;  // ?????
		value = value | bit << i;  // ?????
		////////////////////////////////////////////////////////////////////////////
		std::cout << (int)bit;//////////////////////////////////////////////////////
		////////////////////////////////////////////////////////////////////////////
	}
	////////////////////////////////////////////////////////////////////////////////
	std::cout << " " << (int)value << std::endl;////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////////

	return value;
}